{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "379f7154",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "61b43281",
   "metadata": {},
   "outputs": [],
   "source": [
    "'''#1)Data set reference link: https://www.consumerfinance.gov/data-research/consumer-complaints/#download-the-data\n",
    "File data source: https://files.consumerfinance.gov/ccdb/complaints.csv.zip \n",
    "Problem statement:\n",
    "Download the data from the file data source and provide possible data insights.'''\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "2f542d3e",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\vinay\\AppData\\Local\\Temp\\ipykernel_15276\\1495962175.py:1: DtypeWarning: Columns (16) have mixed types. Specify dtype option on import or set low_memory=False.\n",
      "  data = pd.read_csv('complaints.csv.zip')\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date received</th>\n",
       "      <th>Product</th>\n",
       "      <th>Sub-product</th>\n",
       "      <th>Issue</th>\n",
       "      <th>Sub-issue</th>\n",
       "      <th>Consumer complaint narrative</th>\n",
       "      <th>Company public response</th>\n",
       "      <th>Company</th>\n",
       "      <th>State</th>\n",
       "      <th>ZIP code</th>\n",
       "      <th>Tags</th>\n",
       "      <th>Consumer consent provided?</th>\n",
       "      <th>Submitted via</th>\n",
       "      <th>Date sent to company</th>\n",
       "      <th>Company response to consumer</th>\n",
       "      <th>Timely response?</th>\n",
       "      <th>Consumer disputed?</th>\n",
       "      <th>Complaint ID</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2024-01-24</td>\n",
       "      <td>Credit reporting or other personal consumer re...</td>\n",
       "      <td>Credit reporting</td>\n",
       "      <td>Incorrect information on your report</td>\n",
       "      <td>Account information incorrect</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Company has responded to the consumer and the ...</td>\n",
       "      <td>TRANSUNION INTERMEDIATE HOLDINGS, INC.</td>\n",
       "      <td>FL</td>\n",
       "      <td>33578</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Consent not provided</td>\n",
       "      <td>Web</td>\n",
       "      <td>2024-01-24</td>\n",
       "      <td>Closed with explanation</td>\n",
       "      <td>Yes</td>\n",
       "      <td>NaN</td>\n",
       "      <td>8205544</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2024-02-26</td>\n",
       "      <td>Credit reporting or other personal consumer re...</td>\n",
       "      <td>Credit reporting</td>\n",
       "      <td>Incorrect information on your report</td>\n",
       "      <td>Information belongs to someone else</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Company believes it acted appropriately as aut...</td>\n",
       "      <td>CCS Financial Services, Inc.</td>\n",
       "      <td>NC</td>\n",
       "      <td>27536</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Consent not provided</td>\n",
       "      <td>Web</td>\n",
       "      <td>2024-02-26</td>\n",
       "      <td>Closed with non-monetary relief</td>\n",
       "      <td>Yes</td>\n",
       "      <td>NaN</td>\n",
       "      <td>8423775</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2024-01-26</td>\n",
       "      <td>Credit reporting or other personal consumer re...</td>\n",
       "      <td>Credit reporting</td>\n",
       "      <td>Incorrect information on your report</td>\n",
       "      <td>Information belongs to someone else</td>\n",
       "      <td>The companies, along with the credit reporting...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>EQUIFAX, INC.</td>\n",
       "      <td>NC</td>\n",
       "      <td>28804</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Consent provided</td>\n",
       "      <td>Web</td>\n",
       "      <td>2024-01-26</td>\n",
       "      <td>Closed with non-monetary relief</td>\n",
       "      <td>Yes</td>\n",
       "      <td>NaN</td>\n",
       "      <td>8232435</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2024-01-26</td>\n",
       "      <td>Credit reporting or other personal consumer re...</td>\n",
       "      <td>Credit reporting</td>\n",
       "      <td>Improper use of your report</td>\n",
       "      <td>Reporting company used your report improperly</td>\n",
       "      <td>In accordance with the Fair Credit Reporting a...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>EQUIFAX, INC.</td>\n",
       "      <td>GA</td>\n",
       "      <td>30213</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Consent provided</td>\n",
       "      <td>Web</td>\n",
       "      <td>2024-01-26</td>\n",
       "      <td>Closed with explanation</td>\n",
       "      <td>Yes</td>\n",
       "      <td>NaN</td>\n",
       "      <td>8231458</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2024-01-18</td>\n",
       "      <td>Credit reporting or other personal consumer re...</td>\n",
       "      <td>Credit reporting</td>\n",
       "      <td>Incorrect information on your report</td>\n",
       "      <td>Account information incorrect</td>\n",
       "      <td>XXXX XXXX XXXX XXXX XXXX XXXX XXXX - XXXX Acco...</td>\n",
       "      <td>Company has responded to the consumer and the ...</td>\n",
       "      <td>TRANSUNION INTERMEDIATE HOLDINGS, INC.</td>\n",
       "      <td>TX</td>\n",
       "      <td>752XX</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Consent provided</td>\n",
       "      <td>Web</td>\n",
       "      <td>2024-01-18</td>\n",
       "      <td>Closed with non-monetary relief</td>\n",
       "      <td>Yes</td>\n",
       "      <td>NaN</td>\n",
       "      <td>8179637</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5157096</th>\n",
       "      <td>2023-08-02</td>\n",
       "      <td>Credit reporting, credit repair services, or o...</td>\n",
       "      <td>Credit reporting</td>\n",
       "      <td>Incorrect information on your report</td>\n",
       "      <td>Information belongs to someone else</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>EQUIFAX, INC.</td>\n",
       "      <td>TX</td>\n",
       "      <td>76036</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Other</td>\n",
       "      <td>Web</td>\n",
       "      <td>2023-08-02</td>\n",
       "      <td>Closed with non-monetary relief</td>\n",
       "      <td>Yes</td>\n",
       "      <td>NaN</td>\n",
       "      <td>7337991</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5157097</th>\n",
       "      <td>2023-08-02</td>\n",
       "      <td>Payday loan, title loan, or personal loan</td>\n",
       "      <td>Installment loan</td>\n",
       "      <td>Problem with additional add-on products or ser...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NBT BANCORP INC.</td>\n",
       "      <td>NJ</td>\n",
       "      <td>08046</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Phone</td>\n",
       "      <td>2023-08-02</td>\n",
       "      <td>Closed with explanation</td>\n",
       "      <td>Yes</td>\n",
       "      <td>NaN</td>\n",
       "      <td>7343156</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5157098</th>\n",
       "      <td>2023-08-02</td>\n",
       "      <td>Mortgage</td>\n",
       "      <td>FHA mortgage</td>\n",
       "      <td>Struggling to pay mortgage</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Company believes it acted appropriately as aut...</td>\n",
       "      <td>Chesmar Homes</td>\n",
       "      <td>TX</td>\n",
       "      <td>77316</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Other</td>\n",
       "      <td>Web</td>\n",
       "      <td>2023-08-17</td>\n",
       "      <td>Closed with explanation</td>\n",
       "      <td>Yes</td>\n",
       "      <td>NaN</td>\n",
       "      <td>7340709</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5157099</th>\n",
       "      <td>2023-08-02</td>\n",
       "      <td>Credit reporting, credit repair services, or o...</td>\n",
       "      <td>Credit reporting</td>\n",
       "      <td>Improper use of your report</td>\n",
       "      <td>Reporting company used your report improperly</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>EQUIFAX, INC.</td>\n",
       "      <td>GA</td>\n",
       "      <td>30013</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Consent not provided</td>\n",
       "      <td>Web</td>\n",
       "      <td>2023-08-02</td>\n",
       "      <td>Closed with explanation</td>\n",
       "      <td>Yes</td>\n",
       "      <td>NaN</td>\n",
       "      <td>7341166</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5157100</th>\n",
       "      <td>2023-08-04</td>\n",
       "      <td>Payday loan, title loan, or personal loan</td>\n",
       "      <td>Payday loan</td>\n",
       "      <td>Charged fees or interest you didn't expect</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Flandreau Santee Sioux Tribe</td>\n",
       "      <td>TX</td>\n",
       "      <td>75057</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Consent not provided</td>\n",
       "      <td>Web</td>\n",
       "      <td>2023-08-18</td>\n",
       "      <td>Closed with explanation</td>\n",
       "      <td>Yes</td>\n",
       "      <td>NaN</td>\n",
       "      <td>7350142</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5157101 rows × 18 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        Date received                                            Product  \\\n",
       "0          2024-01-24  Credit reporting or other personal consumer re...   \n",
       "1          2024-02-26  Credit reporting or other personal consumer re...   \n",
       "2          2024-01-26  Credit reporting or other personal consumer re...   \n",
       "3          2024-01-26  Credit reporting or other personal consumer re...   \n",
       "4          2024-01-18  Credit reporting or other personal consumer re...   \n",
       "...               ...                                                ...   \n",
       "5157096    2023-08-02  Credit reporting, credit repair services, or o...   \n",
       "5157097    2023-08-02          Payday loan, title loan, or personal loan   \n",
       "5157098    2023-08-02                                           Mortgage   \n",
       "5157099    2023-08-02  Credit reporting, credit repair services, or o...   \n",
       "5157100    2023-08-04          Payday loan, title loan, or personal loan   \n",
       "\n",
       "              Sub-product                                              Issue  \\\n",
       "0        Credit reporting               Incorrect information on your report   \n",
       "1        Credit reporting               Incorrect information on your report   \n",
       "2        Credit reporting               Incorrect information on your report   \n",
       "3        Credit reporting                        Improper use of your report   \n",
       "4        Credit reporting               Incorrect information on your report   \n",
       "...                   ...                                                ...   \n",
       "5157096  Credit reporting               Incorrect information on your report   \n",
       "5157097  Installment loan  Problem with additional add-on products or ser...   \n",
       "5157098      FHA mortgage                         Struggling to pay mortgage   \n",
       "5157099  Credit reporting                        Improper use of your report   \n",
       "5157100       Payday loan         Charged fees or interest you didn't expect   \n",
       "\n",
       "                                             Sub-issue  \\\n",
       "0                        Account information incorrect   \n",
       "1                  Information belongs to someone else   \n",
       "2                  Information belongs to someone else   \n",
       "3        Reporting company used your report improperly   \n",
       "4                        Account information incorrect   \n",
       "...                                                ...   \n",
       "5157096            Information belongs to someone else   \n",
       "5157097                                            NaN   \n",
       "5157098                                            NaN   \n",
       "5157099  Reporting company used your report improperly   \n",
       "5157100                                            NaN   \n",
       "\n",
       "                              Consumer complaint narrative  \\\n",
       "0                                                      NaN   \n",
       "1                                                      NaN   \n",
       "2        The companies, along with the credit reporting...   \n",
       "3        In accordance with the Fair Credit Reporting a...   \n",
       "4        XXXX XXXX XXXX XXXX XXXX XXXX XXXX - XXXX Acco...   \n",
       "...                                                    ...   \n",
       "5157096                                                NaN   \n",
       "5157097                                                NaN   \n",
       "5157098                                                NaN   \n",
       "5157099                                                NaN   \n",
       "5157100                                                NaN   \n",
       "\n",
       "                                   Company public response  \\\n",
       "0        Company has responded to the consumer and the ...   \n",
       "1        Company believes it acted appropriately as aut...   \n",
       "2                                                      NaN   \n",
       "3                                                      NaN   \n",
       "4        Company has responded to the consumer and the ...   \n",
       "...                                                    ...   \n",
       "5157096                                                NaN   \n",
       "5157097                                                NaN   \n",
       "5157098  Company believes it acted appropriately as aut...   \n",
       "5157099                                                NaN   \n",
       "5157100                                                NaN   \n",
       "\n",
       "                                        Company State ZIP code Tags  \\\n",
       "0        TRANSUNION INTERMEDIATE HOLDINGS, INC.    FL    33578  NaN   \n",
       "1                  CCS Financial Services, Inc.    NC    27536  NaN   \n",
       "2                                 EQUIFAX, INC.    NC    28804  NaN   \n",
       "3                                 EQUIFAX, INC.    GA    30213  NaN   \n",
       "4        TRANSUNION INTERMEDIATE HOLDINGS, INC.    TX    752XX  NaN   \n",
       "...                                         ...   ...      ...  ...   \n",
       "5157096                           EQUIFAX, INC.    TX    76036  NaN   \n",
       "5157097                        NBT BANCORP INC.    NJ    08046  NaN   \n",
       "5157098                           Chesmar Homes    TX    77316  NaN   \n",
       "5157099                           EQUIFAX, INC.    GA    30013  NaN   \n",
       "5157100            Flandreau Santee Sioux Tribe    TX    75057  NaN   \n",
       "\n",
       "        Consumer consent provided? Submitted via Date sent to company  \\\n",
       "0             Consent not provided           Web           2024-01-24   \n",
       "1             Consent not provided           Web           2024-02-26   \n",
       "2                 Consent provided           Web           2024-01-26   \n",
       "3                 Consent provided           Web           2024-01-26   \n",
       "4                 Consent provided           Web           2024-01-18   \n",
       "...                            ...           ...                  ...   \n",
       "5157096                      Other           Web           2023-08-02   \n",
       "5157097                        NaN         Phone           2023-08-02   \n",
       "5157098                      Other           Web           2023-08-17   \n",
       "5157099       Consent not provided           Web           2023-08-02   \n",
       "5157100       Consent not provided           Web           2023-08-18   \n",
       "\n",
       "            Company response to consumer Timely response? Consumer disputed?  \\\n",
       "0                Closed with explanation              Yes                NaN   \n",
       "1        Closed with non-monetary relief              Yes                NaN   \n",
       "2        Closed with non-monetary relief              Yes                NaN   \n",
       "3                Closed with explanation              Yes                NaN   \n",
       "4        Closed with non-monetary relief              Yes                NaN   \n",
       "...                                  ...              ...                ...   \n",
       "5157096  Closed with non-monetary relief              Yes                NaN   \n",
       "5157097          Closed with explanation              Yes                NaN   \n",
       "5157098          Closed with explanation              Yes                NaN   \n",
       "5157099          Closed with explanation              Yes                NaN   \n",
       "5157100          Closed with explanation              Yes                NaN   \n",
       "\n",
       "         Complaint ID  \n",
       "0             8205544  \n",
       "1             8423775  \n",
       "2             8232435  \n",
       "3             8231458  \n",
       "4             8179637  \n",
       "...               ...  \n",
       "5157096       7337991  \n",
       "5157097       7343156  \n",
       "5157098       7340709  \n",
       "5157099       7341166  \n",
       "5157100       7350142  \n",
       "\n",
       "[5157101 rows x 18 columns]"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data = pd.read_csv('complaints.csv.zip')\n",
    "data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "08b80495",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(5157101, 18)"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.shape # There are total 5157101 complaints"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "7fa91a11",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Date received                      4537\n",
       "Product                              21\n",
       "Sub-product                          86\n",
       "Issue                               178\n",
       "Sub-issue                           272\n",
       "Consumer complaint narrative    1478085\n",
       "Company public response              11\n",
       "Company                            7203\n",
       "State                                63\n",
       "ZIP code                          33629\n",
       "Tags                                  3\n",
       "Consumer consent provided?            4\n",
       "Submitted via                         7\n",
       "Date sent to company               4486\n",
       "Company response to consumer          8\n",
       "Timely response?                      2\n",
       "Consumer disputed?                    2\n",
       "Complaint ID                    5157101\n",
       "dtype: int64"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.nunique() # Number of unique values in each column"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "30902299",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date received</th>\n",
       "      <th>Product</th>\n",
       "      <th>Sub-product</th>\n",
       "      <th>Issue</th>\n",
       "      <th>Sub-issue</th>\n",
       "      <th>Consumer complaint narrative</th>\n",
       "      <th>Company public response</th>\n",
       "      <th>Company</th>\n",
       "      <th>State</th>\n",
       "      <th>ZIP code</th>\n",
       "      <th>Tags</th>\n",
       "      <th>Consumer consent provided?</th>\n",
       "      <th>Submitted via</th>\n",
       "      <th>Date sent to company</th>\n",
       "      <th>Company response to consumer</th>\n",
       "      <th>Timely response?</th>\n",
       "      <th>Consumer disputed?</th>\n",
       "      <th>Complaint ID</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Empty DataFrame\n",
       "Columns: [Date received, Product, Sub-product, Issue, Sub-issue, Consumer complaint narrative, Company public response, Company, State, ZIP code, Tags, Consumer consent provided?, Submitted via, Date sent to company, Company response to consumer, Timely response?, Consumer disputed?, Complaint ID]\n",
       "Index: []"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data[data.duplicated()] # There are no duplicate values."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "c0a047c7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Date received                         0\n",
       "Product                               0\n",
       "Sub-product                      235292\n",
       "Issue                                 2\n",
       "Sub-issue                        734976\n",
       "Consumer complaint narrative    3344052\n",
       "Company public response         2685701\n",
       "Company                               0\n",
       "State                             45571\n",
       "ZIP code                          30225\n",
       "Tags                            4674703\n",
       "Consumer consent provided?      1024775\n",
       "Submitted via                         0\n",
       "Date sent to company                  0\n",
       "Company response to consumer         14\n",
       "Timely response?                      0\n",
       "Consumer disputed?              4388785\n",
       "Complaint ID                          0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.isnull().sum() # Number of null values present in each column"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "fd7db93c",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Since the data is categorical we can replace null values with mode of that column."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "99190ad3",
   "metadata": {},
   "outputs": [],
   "source": [
    "data['Sub-product'] = data['Sub-product'].fillna(data['Sub-product'].mode().iloc[0])\n",
    "data['Issue'] = data['Issue'].fillna(data['Issue'].mode().iloc[0])\n",
    "data['Sub-issue'] = data['Sub-issue'].fillna(data['Sub-issue'].mode().iloc[0])\n",
    "data['Consumer complaint narrative'] = data['Consumer complaint narrative'].fillna(data['Consumer complaint narrative'].mode().iloc[0])\n",
    "data['Company public response'] = data['Company public response'].fillna(data['Company public response'].mode().iloc[0])\n",
    "data['State'] = data['State'].fillna(data['State'].mode().iloc[0])\n",
    "data['ZIP code'] = data['ZIP code'].fillna(data['ZIP code'].mode().iloc[0])\n",
    "data['Tags'] = data['Tags'].fillna(data['Tags'].mode().iloc[0])\n",
    "data['Consumer consent provided?'] = data['Consumer consent provided?'].fillna(data['Consumer consent provided?'].mode().iloc[0])\n",
    "data['Company response to consumer'] = data['Company response to consumer'].fillna(data['Company response to consumer'].mode().iloc[0])\n",
    "data['Consumer disputed?'] = data['Consumer disputed?'].fillna(data['Consumer disputed?'].mode().iloc[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "0a3ef150",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Date received                   0\n",
       "Product                         0\n",
       "Sub-product                     0\n",
       "Issue                           0\n",
       "Sub-issue                       0\n",
       "Consumer complaint narrative    0\n",
       "Company public response         0\n",
       "Company                         0\n",
       "State                           0\n",
       "ZIP code                        0\n",
       "Tags                            0\n",
       "Consumer consent provided?      0\n",
       "Submitted via                   0\n",
       "Date sent to company            0\n",
       "Company response to consumer    0\n",
       "Timely response?                0\n",
       "Consumer disputed?              0\n",
       "Complaint ID                    0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "5b610b5d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 5157101 entries, 0 to 5157100\n",
      "Data columns (total 18 columns):\n",
      " #   Column                        Dtype \n",
      "---  ------                        ----- \n",
      " 0   Date received                 object\n",
      " 1   Product                       object\n",
      " 2   Sub-product                   object\n",
      " 3   Issue                         object\n",
      " 4   Sub-issue                     object\n",
      " 5   Consumer complaint narrative  object\n",
      " 6   Company public response       object\n",
      " 7   Company                       object\n",
      " 8   State                         object\n",
      " 9   ZIP code                      object\n",
      " 10  Tags                          object\n",
      " 11  Consumer consent provided?    object\n",
      " 12  Submitted via                 object\n",
      " 13  Date sent to company          object\n",
      " 14  Company response to consumer  object\n",
      " 15  Timely response?              object\n",
      " 16  Consumer disputed?            object\n",
      " 17  Complaint ID                  int64 \n",
      "dtypes: int64(1), object(17)\n",
      "memory usage: 708.2+ MB\n"
     ]
    }
   ],
   "source": [
    "data.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "6520c15f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Complaint ID</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>5.157101e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>5.144943e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>2.406848e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>3.239690e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>5.386608e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>7.263929e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>8.930763e+06</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Complaint ID\n",
       "count  5.157101e+06\n",
       "mean   5.144943e+06\n",
       "std    2.406848e+06\n",
       "min    1.000000e+00\n",
       "25%    3.239690e+06\n",
       "50%    5.386608e+06\n",
       "75%    7.263929e+06\n",
       "max    8.930763e+06"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "399b4f58",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.histplot(data['Date received']);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "fcea8a30",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.histplot(data['Date sent to company']);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "03f2dbeb",
   "metadata": {},
   "outputs": [],
   "source": [
    "#date of recievd and date sent to company is almost similar by seeing the plots."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "aab58229",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "337c5475",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "504e54d8",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "bd4263be",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter the numbers1 3 5 4 7\n",
      "Length of the Longest Continuous increasing Subsequence :  3\n"
     ]
    }
   ],
   "source": [
    "'''#2) Given an unsorted array of integers, find the length of the longest continuous increasing subsequence (subarray). \n",
    "Example 1:\n",
    "Input: [1,3,5,4,7]\n",
    "Output: 3 \n",
    "Example 2:\n",
    "Input: [2,2,2,2,2]\n",
    "Output: 1'''\n",
    "\n",
    "current_len = 1\n",
    "max_len = 1\n",
    "a = [int(x) for x in input('Enter the numbers').split()]\n",
    "for i in range(1,len(a)):\n",
    "  if a[i] > a[i-1]:\n",
    "    current_len =current_len+1\n",
    "    max_len= max(max_len, current_len)\n",
    "  else:\n",
    "    current_len = 1\n",
    "print('Length of the Longest Continuous increasing Subsequence : ',max_len)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "2be3f028",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "' -> In the above code the idea was to find the longest continuous increasing subsequence.\\n    -> So first we have to initialize the current length and maximum length to 1 as the initial value \\n       is default 1.\\n    -> Then we took the input from user.\\n    -> We created a forloop and checked whether the current value is greater than the previous value, \\n       if yes then the current_len gets incremented and max_len is considered to be the maximum of \\n       current_len and max_len.\\n    -> If the condtion fails that is if the current value is less than previous value then the \\n       current_len is updated to 1.\\n    -> Atlast the lenght of the longest continuous incresing subsequence that is max_len is printed.'"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "''' -> In the above code the idea was to find the longest continuous increasing subsequence.\n",
    "    -> So first we have to initialize the current length and maximum length to 1 as the initial value \n",
    "       is default 1.\n",
    "    -> Then we took the input from user.\n",
    "    -> We created a forloop and checked whether the current value is greater than the previous value, \n",
    "       if yes then the current_len gets incremented and max_len is considered to be the maximum of \n",
    "       current_len and max_len.\n",
    "    -> If the condtion fails that is if the current value is less than previous value then the \n",
    "       current_len is updated to 1.\n",
    "    -> Atlast the lenght of the longest continuous incresing subsequence that is max_len is printed.'''\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "563111be",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter the numbers3 30 34 5 9\n",
      "Largest number : 9534330\n"
     ]
    }
   ],
   "source": [
    "'''#3) Given a list of non negative integers, arrange them such that they form the largest number.\n",
    " \n",
    " Example 1:\n",
    " Input: [10,2]\n",
    " Output: \"210\"\n",
    " \n",
    " Example 2:\n",
    " Input: [3,30,34,5,9]\n",
    " Output: \"9534330\"\n",
    "'''\n",
    "\n",
    "a = [str(x) for x in input('Enter the numbers').split()]\n",
    "a.sort(key=lambda x: x*10, reverse=True)\n",
    "output = str(int(''.join(a)))\n",
    "print('Largest number :', output)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "45506151",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "' -> First we take input from user as number then converting them to strings so that it we can\\n       concatenate to get a largest number.\\n    -> After taking the inputs then sorting is done and by using lambda function we can mdoify the\\n       repectective value, here x: x*10 is done beacuse if there are single digit value it would be\\n       hard to find the best possible large number\\n       Example: 3 and 30, the ouput becomes 330 in this case.\\n       and the output becomes 303 if x*10 is not done.\\n    -> After sorting the string values are concatenated and converted to integer type that is numeric.\\n    -> Printing the largest number.\\n'"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "''' -> First we take input from user as number then converting them to strings so that it we can\n",
    "       concatenate to get a largest number.\n",
    "    -> After taking the inputs then sorting is done and by using lambda function we can mdoify the\n",
    "       repectective value, here x: x*10 is done beacuse if there are single digit value it would be\n",
    "       hard to find the best possible large number\n",
    "       Example: 3 and 30, the ouput becomes 330 in this case.\n",
    "       and the output becomes 303 if x*10 is not done.\n",
    "    -> After sorting the string values are concatenated and converted to integer type that is numeric.\n",
    "    -> Printing the largest number.\n",
    "'''"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0cbb920d",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "bc2f97dc",
   "metadata": {},
   "outputs": [],
   "source": [
    "#4. Store all the \"servlet-name\", and \"servlet-class\" to a csv file from the attached sample_json.json file using Python."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "1385878b",
   "metadata": {},
   "outputs": [],
   "source": [
    "import json\n",
    "import csv"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a70d193f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>web-app</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>servlet</th>\n",
       "      <td>[{'servlet-name': 'cofaxCDS', 'servlet-class':...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>servlet-mapping</th>\n",
       "      <td>{'cofaxCDS': '/', 'cofaxEmail': '/cofaxutil/ae...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>taglib</th>\n",
       "      <td>{'taglib-uri': 'cofax.tld', 'taglib-location':...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                           web-app\n",
       "servlet          [{'servlet-name': 'cofaxCDS', 'servlet-class':...\n",
       "servlet-mapping  {'cofaxCDS': '/', 'cofaxEmail': '/cofaxutil/ae...\n",
       "taglib           {'taglib-uri': 'cofax.tld', 'taglib-location':..."
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "jsondata=pd.read_json('DT A1 sample_json (1) (1).json')\n",
    "jsondata"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ad8252e2",
   "metadata": {},
   "outputs": [],
   "source": [
    "# First import the neccesssary libraries such as json and csv and later import the data and read it."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "4242da43",
   "metadata": {},
   "outputs": [],
   "source": [
    "servlets = jsondata['web-app']['servlet']\n",
    "csv_file = 'servlets_data.csv'\n",
    "csv_header = ['servlet-name','servlet-class']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5ab12574",
   "metadata": {},
   "outputs": [],
   "source": [
    "#In the above code the data from json file is extracted.\n",
    "#Then created a csv file and defined header rows for it. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "b770533b",
   "metadata": {},
   "outputs": [],
   "source": [
    "with open(csv_file, mode='w', newline='') as file:\n",
    "    writer = csv.writer(file)\n",
    "    writer.writerow(csv_header)\n",
    "    for servlet in servlets:\n",
    "        servlet_name = servlet['servlet-name']\n",
    "        servlet_class = servlet['servlet-class']\n",
    "        writer.writerow([servlet_name, servlet_class])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7ce96866",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 'with open' is used to open the file in our case it is csv file in write mode 'w'.\n",
    "# Then create a csv writer object using csv.writer then it writes the header row to the csv file.\n",
    "# Later for loop is used to iterate through each servlet in servlets(data extracted from json file).\n",
    "# During this, it extracts servlet name and servlet class from each servlet dictionary and writes it\n",
    "# to csv file."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "90466b08",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>servlet-name</th>\n",
       "      <th>servlet-class</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>cofaxCDS</td>\n",
       "      <td>org.cofax.cds.CDSServlet</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>cofaxEmail</td>\n",
       "      <td>org.cofax.cds.EmailServlet</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>cofaxAdmin</td>\n",
       "      <td>org.cofax.cds.AdminServlet</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>fileServlet</td>\n",
       "      <td>org.cofax.cds.FileServlet</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>cofaxTools</td>\n",
       "      <td>org.cofax.cms.CofaxToolsServlet</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  servlet-name                    servlet-class\n",
       "0     cofaxCDS         org.cofax.cds.CDSServlet\n",
       "1   cofaxEmail       org.cofax.cds.EmailServlet\n",
       "2   cofaxAdmin       org.cofax.cds.AdminServlet\n",
       "3  fileServlet        org.cofax.cds.FileServlet\n",
       "4   cofaxTools  org.cofax.cms.CofaxToolsServlet"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "csvfile=pd.read_csv('servlets_data.csv')\n",
    "csvfile"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e806b416",
   "metadata": {},
   "outputs": [],
   "source": [
    "# The above Dataframe is the new csv file that is being written."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1a49c596",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
